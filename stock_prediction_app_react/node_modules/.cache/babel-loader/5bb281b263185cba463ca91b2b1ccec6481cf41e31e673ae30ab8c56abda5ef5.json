{"ast":null,"code":"import axios from 'axios';\n// 使用Alpha Vantage免费API\n// 为了更稳定，我们切换到使用12个月的免费演示key，并使用股票数据查询示例\nconst API_KEY = 'demo';\nconst BASE_URL = 'https://www.alphavantage.co/query';\n\n// Alpha Vantage的demo密钥可用的股票代码\nconst DEMO_SYMBOLS = ['IBM', 'AAPL', 'MSFT'];\nexport const getStockQuote = async symbol => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n\n    // 验证是否是demo支持的股票代码\n    if (API_KEY === 'demo' && !DEMO_SYMBOLS.includes(formattedSymbol)) {\n      console.warn(`使用demo API密钥时，仅支持以下股票代码: ${DEMO_SYMBOLS.join(', ')}`);\n    }\n    console.log(`正在请求股票数据: ${formattedSymbol}`);\n    const response = await axios.get(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${formattedSymbol}&apikey=${API_KEY}`);\n    console.log('API响应:', response.data);\n\n    // 处理Alpha Vantage响应格式\n    const data = response.data['Global Quote'];\n    if (!data || Object.keys(data).length === 0) {\n      console.error('API返回的数据为空或格式不正确', response.data);\n\n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到股票数据');\n      }\n    }\n\n    // 将Alpha Vantage数据转换为我们的StockQuote格式\n    const quote = {\n      symbol: data['01. symbol'],\n      companyName: data['01. symbol'],\n      // Alpha Vantage不提供公司名称，使用股票代码替代\n      latestPrice: parseFloat(data['05. price']),\n      change: parseFloat(data['09. change']),\n      changePercent: parseFloat(data['10. change percent'].replace('%', '')) / 100,\n      latestTime: new Date().toLocaleString() // 使用当前时间\n    };\n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\nexport const getStockChartData = async symbol => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n\n    // 验证是否是demo支持的股票代码\n    if (API_KEY === 'demo' && !DEMO_SYMBOLS.includes(formattedSymbol)) {\n      console.warn(`使用demo API密钥时，仅支持以下股票代码: ${DEMO_SYMBOLS.join(', ')}`);\n    }\n    console.log(`正在请求图表数据: ${formattedSymbol}`);\n    const response = await axios.get(`${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${formattedSymbol}&outputsize=compact&apikey=${API_KEY}`);\n    console.log('图表数据API响应的键:', Object.keys(response.data));\n    const timeSeries = response.data['Time Series (Daily)'];\n    if (!timeSeries) {\n      console.error('API返回的图表数据为空或格式不正确', response.data);\n\n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到图表数据');\n      }\n    }\n\n    // 将Alpha Vantage数据转换为我们的StockChartData格式\n    const chartData = Object.entries(timeSeries).map(([date, values]) => ({\n      date,\n      open: parseFloat(values['1. open']),\n      high: parseFloat(values['2. high']),\n      low: parseFloat(values['3. low']),\n      close: parseFloat(values['4. close']),\n      volume: parseFloat(values['5. volume'])\n    })).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // 按日期排序\n\n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","DEMO_SYMBOLS","getStockQuote","symbol","formattedSymbol","trim","toUpperCase","includes","console","warn","join","log","response","get","data","Object","keys","length","error","Note","Error","Information","quote","companyName","latestPrice","parseFloat","change","changePercent","replace","latestTime","Date","toLocaleString","getStockChartData","timeSeries","chartData","entries","map","date","values","open","high","low","close","volume","sort","a","b","getTime"],"sources":["/Users/wei.tao/Desktop/Cursor FIles/stock_prediction_app_react/src/services/stockService.ts"],"sourcesContent":["import axios from 'axios';\nimport { StockQuote, StockChartData } from '../types/stock';\n\n// 使用Alpha Vantage免费API\n// 为了更稳定，我们切换到使用12个月的免费演示key，并使用股票数据查询示例\nconst API_KEY = 'demo';\nconst BASE_URL = 'https://www.alphavantage.co/query';\n\n// Alpha Vantage的demo密钥可用的股票代码\nconst DEMO_SYMBOLS = ['IBM', 'AAPL', 'MSFT'];\n\nexport const getStockQuote = async (symbol: string): Promise<StockQuote> => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    \n    // 验证是否是demo支持的股票代码\n    if (API_KEY === 'demo' && !DEMO_SYMBOLS.includes(formattedSymbol)) {\n      console.warn(`使用demo API密钥时，仅支持以下股票代码: ${DEMO_SYMBOLS.join(', ')}`);\n    }\n    \n    console.log(`正在请求股票数据: ${formattedSymbol}`);\n    const response = await axios.get(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${formattedSymbol}&apikey=${API_KEY}`);\n    \n    console.log('API响应:', response.data);\n    \n    // 处理Alpha Vantage响应格式\n    const data = response.data['Global Quote'];\n    if (!data || Object.keys(data).length === 0) {\n      console.error('API返回的数据为空或格式不正确', response.data);\n      \n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到股票数据');\n      }\n    }\n    \n    // 将Alpha Vantage数据转换为我们的StockQuote格式\n    const quote: StockQuote = {\n      symbol: data['01. symbol'],\n      companyName: data['01. symbol'], // Alpha Vantage不提供公司名称，使用股票代码替代\n      latestPrice: parseFloat(data['05. price']),\n      change: parseFloat(data['09. change']),\n      changePercent: parseFloat(data['10. change percent'].replace('%', '')) / 100,\n      latestTime: new Date().toLocaleString() // 使用当前时间\n    };\n    \n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\n\nexport const getStockChartData = async (symbol: string): Promise<StockChartData[]> => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    \n    // 验证是否是demo支持的股票代码\n    if (API_KEY === 'demo' && !DEMO_SYMBOLS.includes(formattedSymbol)) {\n      console.warn(`使用demo API密钥时，仅支持以下股票代码: ${DEMO_SYMBOLS.join(', ')}`);\n    }\n    \n    console.log(`正在请求图表数据: ${formattedSymbol}`);\n    const response = await axios.get(\n      `${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${formattedSymbol}&outputsize=compact&apikey=${API_KEY}`\n    );\n    \n    console.log('图表数据API响应的键:', Object.keys(response.data));\n    \n    const timeSeries = response.data['Time Series (Daily)'];\n    if (!timeSeries) {\n      console.error('API返回的图表数据为空或格式不正确', response.data);\n      \n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到图表数据');\n      }\n    }\n    \n    // 将Alpha Vantage数据转换为我们的StockChartData格式\n    const chartData: StockChartData[] = Object.entries(timeSeries).map(([date, values]: [string, any]) => ({\n      date,\n      open: parseFloat(values['1. open']),\n      high: parseFloat(values['2. high']),\n      low: parseFloat(values['3. low']),\n      close: parseFloat(values['4. close']),\n      volume: parseFloat(values['5. volume'])\n    }))\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // 按日期排序\n    \n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}