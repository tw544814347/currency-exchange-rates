{"ast":null,"code":"import axios from 'axios';\n// 使用Yahoo Finance API，不需要API密钥\nconst getStockQuote = async symbol => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求股票数据: ${formattedSymbol}`);\n\n    // 使用YahooFinance API\n    const response = await axios.get(`https://query1.finance.yahoo.com/v7/finance/quote?symbols=${formattedSymbol}`);\n    console.log('API响应:', response.data);\n    if (!response.data || !response.data.quoteResponse || !response.data.quoteResponse.result || response.data.quoteResponse.result.length === 0) {\n      throw new Error('没有找到股票数据');\n    }\n    const quoteData = response.data.quoteResponse.result[0];\n\n    // 转换为我们的StockQuote格式\n    const quote = {\n      symbol: quoteData.symbol,\n      companyName: quoteData.shortName || quoteData.longName || quoteData.symbol,\n      latestPrice: quoteData.regularMarketPrice,\n      change: quoteData.regularMarketChange,\n      changePercent: quoteData.regularMarketChangePercent / 100,\n      latestTime: new Date(quoteData.regularMarketTime * 1000).toLocaleString()\n    };\n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\nconst getStockChartData = async symbol => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求图表数据: ${formattedSymbol}`);\n\n    // 获取历史数据\n    // 区间：1mo = 1个月\n    const response = await axios.get(`https://query1.finance.yahoo.com/v8/finance/chart/${formattedSymbol}?interval=1d&range=1mo`);\n    console.log('图表数据API响应的键:', Object.keys(response.data));\n    if (!response.data || !response.data.chart || !response.data.chart.result || response.data.chart.result.length === 0) {\n      throw new Error('没有找到图表数据');\n    }\n    const result = response.data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quote = result.indicators.quote[0];\n    if (!timestamps || !quote || timestamps.length === 0) {\n      throw new Error('图表数据格式不正确');\n    }\n\n    // 将Yahoo Finance数据转换为我们的StockChartData格式\n    const chartData = timestamps.map((timestamp, index) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toISOString().split('T')[0],\n        // 格式化为 YYYY-MM-DD\n        open: quote.open[index] || 0,\n        high: quote.high[index] || 0,\n        low: quote.low[index] || 0,\n        close: quote.close[index] || 0,\n        volume: quote.volume[index] || 0\n      };\n    }).filter(item =>\n    // 过滤掉有null或undefined值的数据点\n    item.open !== null && item.high !== null && item.low !== null && item.close !== null && item.volume !== null);\n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n};\nexport { getStockQuote, getStockChartData };","map":{"version":3,"names":["axios","getStockQuote","symbol","formattedSymbol","trim","toUpperCase","console","log","response","get","data","quoteResponse","result","length","Error","quoteData","quote","companyName","shortName","longName","latestPrice","regularMarketPrice","change","regularMarketChange","changePercent","regularMarketChangePercent","latestTime","Date","regularMarketTime","toLocaleString","error","getStockChartData","Object","keys","chart","timestamps","timestamp","indicators","chartData","map","index","date","toISOString","split","open","high","low","close","volume","filter","item"],"sources":["/Users/wei.tao/Desktop/Cursor FIles/stock_prediction_app_react/src/services/stockService.ts"],"sourcesContent":["import axios from 'axios';\nimport { StockQuote, StockChartData } from '../types/stock';\n\n// 使用Yahoo Finance API，不需要API密钥\nconst getStockQuote = async (symbol: string): Promise<StockQuote> => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求股票数据: ${formattedSymbol}`);\n    \n    // 使用YahooFinance API\n    const response = await axios.get(`https://query1.finance.yahoo.com/v7/finance/quote?symbols=${formattedSymbol}`);\n    console.log('API响应:', response.data);\n    \n    if (!response.data || !response.data.quoteResponse || !response.data.quoteResponse.result || response.data.quoteResponse.result.length === 0) {\n      throw new Error('没有找到股票数据');\n    }\n    \n    const quoteData = response.data.quoteResponse.result[0];\n    \n    // 转换为我们的StockQuote格式\n    const quote: StockQuote = {\n      symbol: quoteData.symbol,\n      companyName: quoteData.shortName || quoteData.longName || quoteData.symbol,\n      latestPrice: quoteData.regularMarketPrice,\n      change: quoteData.regularMarketChange,\n      changePercent: quoteData.regularMarketChangePercent / 100,\n      latestTime: new Date(quoteData.regularMarketTime * 1000).toLocaleString()\n    };\n    \n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\n\nconst getStockChartData = async (symbol: string): Promise<StockChartData[]> => {\n  try {\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求图表数据: ${formattedSymbol}`);\n    \n    // 获取历史数据\n    // 区间：1mo = 1个月\n    const response = await axios.get(\n      `https://query1.finance.yahoo.com/v8/finance/chart/${formattedSymbol}?interval=1d&range=1mo`\n    );\n    \n    console.log('图表数据API响应的键:', Object.keys(response.data));\n    \n    if (!response.data || !response.data.chart || !response.data.chart.result || response.data.chart.result.length === 0) {\n      throw new Error('没有找到图表数据');\n    }\n    \n    const result = response.data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quote = result.indicators.quote[0];\n    \n    if (!timestamps || !quote || timestamps.length === 0) {\n      throw new Error('图表数据格式不正确');\n    }\n    \n    // 将Yahoo Finance数据转换为我们的StockChartData格式\n    const chartData: StockChartData[] = timestamps.map((timestamp: number, index: number) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toISOString().split('T')[0], // 格式化为 YYYY-MM-DD\n        open: quote.open[index] || 0,\n        high: quote.high[index] || 0,\n        low: quote.low[index] || 0,\n        close: quote.close[index] || 0,\n        volume: quote.volume[index] || 0\n      };\n    }).filter((item: StockChartData) => \n      // 过滤掉有null或undefined值的数据点\n      item.open !== null && item.high !== null && item.low !== null && item.close !== null && item.volume !== null\n    );\n    \n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n};\n\nexport { getStockQuote, getStockChartData }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}