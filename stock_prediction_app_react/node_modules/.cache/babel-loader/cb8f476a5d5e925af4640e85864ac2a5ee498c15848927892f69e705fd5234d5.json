{"ast":null,"code":"import axios from 'axios';\n// 使用Alpha Vantage API\nconst BASE_URL = 'https://www.alphavantage.co/query';\n\n// 从localStorage获取API密钥\nconst getApiKey = () => {\n  return localStorage.getItem('alphavantage_api_key') || '';\n};\n\n// 保存API密钥到localStorage\nexport const saveApiKey = apiKey => {\n  localStorage.setItem('alphavantage_api_key', apiKey);\n};\n\n// 检查是否已设置API密钥\nexport const hasApiKey = () => {\n  const key = getApiKey();\n  return key !== null && key !== '';\n};\n\n// 获取股票数据\nexport const getStockQuote = async symbol => {\n  try {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      throw new Error('请先设置API密钥');\n    }\n\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求股票数据: ${formattedSymbol}`);\n    const response = await axios.get(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${formattedSymbol}&apikey=${apiKey}`);\n    console.log('API响应:', response.data);\n\n    // 处理Alpha Vantage响应格式\n    const data = response.data['Global Quote'];\n    if (!data || Object.keys(data).length === 0) {\n      console.error('API返回的数据为空或格式不正确', response.data);\n\n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到股票数据');\n      }\n    }\n\n    // 将Alpha Vantage数据转换为我们的StockQuote格式\n    const quote = {\n      symbol: data['01. symbol'],\n      companyName: data['01. symbol'],\n      // Alpha Vantage不提供公司名称，使用股票代码替代\n      latestPrice: parseFloat(data['05. price']),\n      change: parseFloat(data['09. change']),\n      changePercent: parseFloat(data['10. change percent'].replace('%', '')) / 100,\n      latestTime: new Date().toLocaleString() // 使用当前时间\n    };\n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\n\n// 获取图表数据\nexport const getStockChartData = async symbol => {\n  try {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      throw new Error('请先设置API密钥');\n    }\n\n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求图表数据: ${formattedSymbol}`);\n    const response = await axios.get(`${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${formattedSymbol}&outputsize=compact&apikey=${apiKey}`);\n    console.log('图表数据API响应的键:', Object.keys(response.data));\n    const timeSeries = response.data['Time Series (Daily)'];\n    if (!timeSeries) {\n      console.error('API返回的图表数据为空或格式不正确', response.data);\n\n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到图表数据');\n      }\n    }\n\n    // 将Alpha Vantage数据转换为我们的StockChartData格式\n    const chartData = Object.entries(timeSeries).map(([date, values]) => ({\n      date,\n      open: parseFloat(values['1. open']),\n      high: parseFloat(values['2. high']),\n      low: parseFloat(values['3. low']),\n      close: parseFloat(values['4. close']),\n      volume: parseFloat(values['5. volume'])\n    })).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // 按日期排序\n\n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","getApiKey","localStorage","getItem","saveApiKey","apiKey","setItem","hasApiKey","key","getStockQuote","symbol","Error","formattedSymbol","trim","toUpperCase","console","log","response","get","data","Object","keys","length","error","Note","Information","quote","companyName","latestPrice","parseFloat","change","changePercent","replace","latestTime","Date","toLocaleString","getStockChartData","timeSeries","chartData","entries","map","date","values","open","high","low","close","volume","sort","a","b","getTime"],"sources":["/Users/wei.tao/Desktop/Cursor FIles/stock_prediction_app_react/src/services/stockService.ts"],"sourcesContent":["import axios from 'axios';\nimport { StockQuote, StockChartData } from '../types/stock';\n\n// 使用Alpha Vantage API\nconst BASE_URL = 'https://www.alphavantage.co/query';\n\n// 从localStorage获取API密钥\nconst getApiKey = (): string => {\n  return localStorage.getItem('alphavantage_api_key') || '';\n};\n\n// 保存API密钥到localStorage\nexport const saveApiKey = (apiKey: string): void => {\n  localStorage.setItem('alphavantage_api_key', apiKey);\n};\n\n// 检查是否已设置API密钥\nexport const hasApiKey = (): boolean => {\n  const key = getApiKey();\n  return key !== null && key !== '';\n};\n\n// 获取股票数据\nexport const getStockQuote = async (symbol: string): Promise<StockQuote> => {\n  try {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      throw new Error('请先设置API密钥');\n    }\n    \n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求股票数据: ${formattedSymbol}`);\n    \n    const response = await axios.get(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${formattedSymbol}&apikey=${apiKey}`);\n    console.log('API响应:', response.data);\n    \n    // 处理Alpha Vantage响应格式\n    const data = response.data['Global Quote'];\n    if (!data || Object.keys(data).length === 0) {\n      console.error('API返回的数据为空或格式不正确', response.data);\n      \n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到股票数据');\n      }\n    }\n    \n    // 将Alpha Vantage数据转换为我们的StockQuote格式\n    const quote: StockQuote = {\n      symbol: data['01. symbol'],\n      companyName: data['01. symbol'], // Alpha Vantage不提供公司名称，使用股票代码替代\n      latestPrice: parseFloat(data['05. price']),\n      change: parseFloat(data['09. change']),\n      changePercent: parseFloat(data['10. change percent'].replace('%', '')) / 100,\n      latestTime: new Date().toLocaleString() // 使用当前时间\n    };\n    \n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\n\n// 获取图表数据\nexport const getStockChartData = async (symbol: string): Promise<StockChartData[]> => {\n  try {\n    const apiKey = getApiKey();\n    if (!apiKey) {\n      throw new Error('请先设置API密钥');\n    }\n    \n    // 使用大写并修剪空格\n    const formattedSymbol = symbol.trim().toUpperCase();\n    console.log(`正在请求图表数据: ${formattedSymbol}`);\n    \n    const response = await axios.get(\n      `${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${formattedSymbol}&outputsize=compact&apikey=${apiKey}`\n    );\n    \n    console.log('图表数据API响应的键:', Object.keys(response.data));\n    \n    const timeSeries = response.data['Time Series (Daily)'];\n    if (!timeSeries) {\n      console.error('API返回的图表数据为空或格式不正确', response.data);\n      \n      // 检查是否有错误信息或API限制提示\n      if (response.data.Note) {\n        throw new Error(`API限制: ${response.data.Note}`);\n      } else if (response.data.Information) {\n        throw new Error(`API信息: ${response.data.Information}`);\n      } else {\n        throw new Error('没有找到图表数据');\n      }\n    }\n    \n    // 将Alpha Vantage数据转换为我们的StockChartData格式\n    const chartData: StockChartData[] = Object.entries(timeSeries).map(([date, values]: [string, any]) => ({\n      date,\n      open: parseFloat(values['1. open']),\n      high: parseFloat(values['2. high']),\n      low: parseFloat(values['3. low']),\n      close: parseFloat(values['4. close']),\n      volume: parseFloat(values['5. volume'])\n    }))\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // 按日期排序\n    \n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}