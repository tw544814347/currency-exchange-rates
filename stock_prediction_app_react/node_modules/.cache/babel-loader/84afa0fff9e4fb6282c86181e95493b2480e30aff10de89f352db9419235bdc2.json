{"ast":null,"code":"import axios from 'axios';\n// 使用Alpha Vantage免费API\nconst API_KEY = 'demo'; // 使用演示密钥，有限制但可用于测试\nconst BASE_URL = 'https://www.alphavantage.co/query';\nexport const getStockQuote = async symbol => {\n  try {\n    const response = await axios.get(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`);\n\n    // 处理Alpha Vantage响应格式\n    const data = response.data['Global Quote'];\n    if (!data || Object.keys(data).length === 0) {\n      throw new Error('没有找到股票数据');\n    }\n\n    // 将Alpha Vantage数据转换为我们的StockQuote格式\n    const quote = {\n      symbol: data['01. symbol'],\n      companyName: data['01. symbol'],\n      // Alpha Vantage不提供公司名称，使用股票代码替代\n      latestPrice: parseFloat(data['05. price']),\n      change: parseFloat(data['09. change']),\n      changePercent: parseFloat(data['10. change percent'].replace('%', '')) / 100,\n      latestTime: new Date().toLocaleString() // 使用当前时间\n    };\n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\nexport const getStockChartData = async symbol => {\n  try {\n    const response = await axios.get(`${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${symbol}&outputsize=compact&apikey=${API_KEY}`);\n    const timeSeries = response.data['Time Series (Daily)'];\n    if (!timeSeries) {\n      throw new Error('没有找到图表数据');\n    }\n\n    // 将Alpha Vantage数据转换为我们的StockChartData格式\n    const chartData = Object.entries(timeSeries).map(([date, values]) => ({\n      date,\n      open: parseFloat(values['1. open']),\n      high: parseFloat(values['2. high']),\n      low: parseFloat(values['3. low']),\n      close: parseFloat(values['4. close']),\n      volume: parseFloat(values['5. volume'])\n    })).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // 按日期排序\n\n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","getStockQuote","symbol","response","get","data","Object","keys","length","Error","quote","companyName","latestPrice","parseFloat","change","changePercent","replace","latestTime","Date","toLocaleString","error","console","getStockChartData","timeSeries","chartData","entries","map","date","values","open","high","low","close","volume","sort","a","b","getTime"],"sources":["/Users/wei.tao/Desktop/Cursor FIles/stock_prediction_app_react/src/services/stockService.ts"],"sourcesContent":["import axios from 'axios';\nimport { StockQuote, StockChartData } from '../types/stock';\n\n// 使用Alpha Vantage免费API\nconst API_KEY = 'demo'; // 使用演示密钥，有限制但可用于测试\nconst BASE_URL = 'https://www.alphavantage.co/query';\n\nexport const getStockQuote = async (symbol: string): Promise<StockQuote> => {\n  try {\n    const response = await axios.get(`${BASE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`);\n    \n    // 处理Alpha Vantage响应格式\n    const data = response.data['Global Quote'];\n    if (!data || Object.keys(data).length === 0) {\n      throw new Error('没有找到股票数据');\n    }\n    \n    // 将Alpha Vantage数据转换为我们的StockQuote格式\n    const quote: StockQuote = {\n      symbol: data['01. symbol'],\n      companyName: data['01. symbol'], // Alpha Vantage不提供公司名称，使用股票代码替代\n      latestPrice: parseFloat(data['05. price']),\n      change: parseFloat(data['09. change']),\n      changePercent: parseFloat(data['10. change percent'].replace('%', '')) / 100,\n      latestTime: new Date().toLocaleString() // 使用当前时间\n    };\n    \n    return quote;\n  } catch (error) {\n    console.error('获取股票数据失败:', error);\n    throw error;\n  }\n};\n\nexport const getStockChartData = async (symbol: string): Promise<StockChartData[]> => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}?function=TIME_SERIES_DAILY&symbol=${symbol}&outputsize=compact&apikey=${API_KEY}`\n    );\n    \n    const timeSeries = response.data['Time Series (Daily)'];\n    if (!timeSeries) {\n      throw new Error('没有找到图表数据');\n    }\n    \n    // 将Alpha Vantage数据转换为我们的StockChartData格式\n    const chartData: StockChartData[] = Object.entries(timeSeries).map(([date, values]: [string, any]) => ({\n      date,\n      open: parseFloat(values['1. open']),\n      high: parseFloat(values['2. high']),\n      low: parseFloat(values['3. low']),\n      close: parseFloat(values['4. close']),\n      volume: parseFloat(values['5. volume'])\n    })).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()); // 按日期排序\n    \n    return chartData;\n  } catch (error) {\n    console.error('获取图表数据失败:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,OAAO,GAAG,MAAM,CAAC,CAAC;AACxB,MAAMC,QAAQ,GAAG,mCAAmC;AAEpD,OAAO,MAAMC,aAAa,GAAG,MAAOC,MAAc,IAA0B;EAC1E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGJ,QAAQ,iCAAiCE,MAAM,WAAWH,OAAO,EAAE,CAAC;;IAExG;IACA,MAAMM,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAAC,cAAc,CAAC;IAC1C,IAAI,CAACA,IAAI,IAAIC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;MAC3C,MAAM,IAAIC,KAAK,CAAC,UAAU,CAAC;IAC7B;;IAEA;IACA,MAAMC,KAAiB,GAAG;MACxBR,MAAM,EAAEG,IAAI,CAAC,YAAY,CAAC;MAC1BM,WAAW,EAAEN,IAAI,CAAC,YAAY,CAAC;MAAE;MACjCO,WAAW,EAAEC,UAAU,CAACR,IAAI,CAAC,WAAW,CAAC,CAAC;MAC1CS,MAAM,EAAED,UAAU,CAACR,IAAI,CAAC,YAAY,CAAC,CAAC;MACtCU,aAAa,EAAEF,UAAU,CAACR,IAAI,CAAC,oBAAoB,CAAC,CAACW,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG;MAC5EC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,OAAOT,KAAK;EACd,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAOpB,MAAc,IAAgC;EACpF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAC9B,GAAGJ,QAAQ,sCAAsCE,MAAM,8BAA8BH,OAAO,EAC9F,CAAC;IAED,MAAMwB,UAAU,GAAGpB,QAAQ,CAACE,IAAI,CAAC,qBAAqB,CAAC;IACvD,IAAI,CAACkB,UAAU,EAAE;MACf,MAAM,IAAId,KAAK,CAAC,UAAU,CAAC;IAC7B;;IAEA;IACA,MAAMe,SAA2B,GAAGlB,MAAM,CAACmB,OAAO,CAACF,UAAU,CAAC,CAACG,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,MAAM,CAAgB,MAAM;MACrGD,IAAI;MACJE,IAAI,EAAEhB,UAAU,CAACe,MAAM,CAAC,SAAS,CAAC,CAAC;MACnCE,IAAI,EAAEjB,UAAU,CAACe,MAAM,CAAC,SAAS,CAAC,CAAC;MACnCG,GAAG,EAAElB,UAAU,CAACe,MAAM,CAAC,QAAQ,CAAC,CAAC;MACjCI,KAAK,EAAEnB,UAAU,CAACe,MAAM,CAAC,UAAU,CAAC,CAAC;MACrCK,MAAM,EAAEpB,UAAU,CAACe,MAAM,CAAC,WAAW,CAAC;IACxC,CAAC,CAAC,CAAC,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIlB,IAAI,CAACiB,CAAC,CAACR,IAAI,CAAC,CAACU,OAAO,CAAC,CAAC,GAAG,IAAInB,IAAI,CAACkB,CAAC,CAACT,IAAI,CAAC,CAACU,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE7E,OAAOb,SAAS;EAClB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}